const User = require('../models/mainschema.js');
const secret = 'pavan'; 




const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

module.exports.Registeruser = async (req, res) => {
  console.log(req.body)
  try {
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(req.body.password, salt);
    const newUser = new User({
      email: req.body.email,
      password: hashedPassword,
      name: req.body.name,
      dateOfBirth: req.body.dateOfBirth,
      pensionAccountNumber: req.body.pensionAccountNumber,
      contactInformation: req.body.contactInformation,
      lifeCertificate: req.body.lifeCertificate,
      aadharNumber: req.body.aadharNumber,
      photo: req.body.photo,
      signature: req.body.signature,
      state: req.body.state,
      district: req.body.district,
      isFamilyPensioner: req.body.isFamilyPensioner
    });

    const savedUser = await newUser.save();

    res.status(201).json({ message: 'User created successfully', userId: savedUser._id });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};



module.exports.loginUser = async (req, res) => {
  try {
    const user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid email or password' });
    }

    // Check if the password is correct
    const validPassword = await bcrypt.compare(req.body.password, user.password);
    if (!validPassword) {
      return res.status(400).json({ message: 'Invalid email or password' });
    }

    const token = jwt.sign({ _id: user._id,email:user.email,name:user.name },secret);

    res.status(200).json({ message: 'Logged in successfully', token: token });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};



module.exports.Updateuser=async (req, res) => {
  try {
    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      {
        name: req.body.name,
        dateOfBirth: req.body.dateOfBirth,
        pensionAccountNumber: req.body.pensionAccountNumber,
        contactInformation: req.body.contactInformation,
        lifeCertificate: req.body.lifeCertificate,
        aadharNumber: req.body.aadharNumber,
        photo: req.body.photo,
        signature: req.body.signature,
        state: req.body.state,
        district: req.body.district,
        isFamilyPensioner: req.body.isFamilyPensioner
      },
      { new: true }
    );
    res.status(200).json(updatedUser);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
}



module.exports.getUserdetails= async (req,res)=>{
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    return res.status(200).json({ user });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }

}
